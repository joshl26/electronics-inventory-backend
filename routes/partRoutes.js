const express = require("express");
const router = express.Router();
const partsController = require("../controllers/partsController");
const verifyJWT = require("../middleware/verifyJWT");

/**
 * @swagger
 *  components:
 *   schemas:
 *    Parts:
 *      type: object
 *      required:
 *      - user
 *      - name
 *      - description
 *      properties:
 *          _id:
 *             type: string
 *             format: uuid
 *             description: The unique id auto generated by mongoose for the part
 *          user:
 *             type: string
 *             format: uuid
 *             description: The unique id auto generated by mongoose for the user
 *          name:
 *              type: string
 *              description: The name of the part
 *          description:
 *              type: string
 *              description: The description of the part
 *          qty:
 *              type: number
 *              description: The inventory stock qty of the part
 *          partType:
 *              type: string
 *              description: The type of the part
 *          createdAt:
 *              type: date
 *              description: Date/Time Note created
 *          updatedAt:
 *              type: date
 *              description: Date/Time Note updated
 *          ticket2:
 *              type: number
 *              description: Ticket number for note
 *          __V:
 *              type: number
 *              format: int32
 *              description: Version of the note, starting at 0 and incremented by +1 with each change saved
 *          images:
 *              type: array
 *              description: Array of image objects
 *              items:
 *                  type: object
 *                  properties:
 *                      _id:
 *                          type: string
 *                          format: uuid
 *                          description: The id auto generated by mongoose for the campground
 *                      url:
 *                          type: string
 *                          format: uri
 *                          description: The url of the image
 *                      filename:
 *                          type: string
 *                          description: The filename of the image
 *          partNumber:
 *              type: string
 *              description: The part number of the part
 *          serialNumber:
 *              type: string
 *              description: The serial number of the part
 *          manufacturer:
 *              type: string
 *              description: The manufacturer of the part
 *          updatedBy:
 *              type: string
 *              description: The name of the user that last updated the part
 *          mfgDate:
 *              type: string
 *              description: The manufacturing date of the part
 *          backorder:
 *              type: number
 *              description: The backorder qty of the part
 *          vendorName:
 *              type: string
 *              description: The vendor name of the part
 *          partPackage:
 *              type: string
 *              description: The package type of the part
 *          partLocation:
 *              type: string
 *              description: The location of the part
 *          deletedImages:
 *              type: array
 *              description: Array of image objects
 *              items:
 *                  type: object
 *                  properties:
 *                      _id:
 *                          type: string
 *                          format: uuid
 *                          description: The id auto generated by mongoose for the campground
 *                      url:
 *                          type: string
 *                          format: uri
 *                          description: The url of the image
 *                      filename:
 *                          type: string
 *                          description: The filename of the image
 *          cost:
 *              type: number
 *              description: The cost of the part
 *          createdBy:
 *              type: string
 *              description: The name of the user of that created the part
 *
 */

/**
 * @swagger
 * /parts/:
 *   get:
 *     tags:
 *     - Parts
 *
 */

/**
 * @swagger
 * /parts/:
 *   get:
 *     summary: Get all parts from DB
 *     description: Return all parts in database
 *     responses:
 *       200:
 *         description: List of parts
 */

/**
 * @swagger
 * /parts/:
 *   post:
 *     tags:
 *     - Parts
 *
 */

/**
 * @swagger
 * /parts/:
 *   post:
 *     summary: Create new part
 *     description: Create new part
 *     responses:
 *       200:
 *         description: Create new part
 */

/**
 * @swagger
 * /parts/:
 *   patch:
 *     tags:
 *     - Parts
 *
 */

/**
 * @swagger
 * /parts/:
 *   patch:
 *     summary: Update part details
 *     description: Update part details
 *     responses:
 *       200:
 *         description: Update part details
 */

/**
 * @swagger
 * /parts/:
 *   delete:
 *     tags:
 *     - Parts
 *
 */

/**
 * @swagger
 * /parts/:
 *   delete:
 *     summary: Delete part
 *     description: Delete part
 *     responses:
 *       200:
 *         description: Delete part
 */

router.use(verifyJWT);

router
  .route("/")
  .get(partsController.getAllParts)
  .post(partsController.createNewPart)
  .patch(partsController.updatePart)
  .delete(partsController.deletePart);

module.exports = router;
